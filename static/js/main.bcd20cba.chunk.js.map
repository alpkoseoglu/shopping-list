{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","value","items","JSON","parse","localStorage","getItem","itemIndex","handleChange","bind","handleSubmit","setItem","stringify","event","this","setState","target","preventDefault","val","trim","item","splice","e","index","getAttribute","list","className","onSubmit","id","type","placeholder","ref","onChange","map","key","onClick","edit","data-key","delete","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAiFeA,G,kBA7Eb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,GACPC,MAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GACpDC,UAAW,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAEpBJ,aAAaM,QAAQ,QAASR,KAAKS,UAAU,EAAKZ,MAAME,QAV5C,E,0EAaDW,GACXC,KAAKC,SAAS,CAAEd,MAAOY,EAAMG,OAAOf,U,mCAGzBY,GACXA,EAAMI,iBACN,IAAIC,EAAMJ,KAAKd,MAAMC,MAAMkB,OAC3B,GAAY,KAARD,EAAY,CACd,IAAIE,EAAOjB,KAAKC,MAAMC,aAAaC,QAAQ,UAC3Cc,EAAKC,OAAOP,KAAKd,MAAMO,UAAW,EAAGW,GACrCJ,KAAKC,SAAS,CAAER,UAAW,IAC3BF,aAAaM,QAAQ,QAASR,KAAKS,UAAUQ,IAE/CN,KAAKC,SAAS,CAAEd,MAAO,GAAIC,MAAOC,KAAKC,MAAMC,aAAaC,QAAQ,c,2BAG/DgB,GACH,IAAIC,EAAQD,EAAEN,OAAOQ,aAAa,YAClCV,KAAKC,SAAS,CAAER,UAAWgB,IAC3B,IAAIrB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC5CQ,KAAKC,SAAS,CAAEd,MAAOC,EAAMqB,GAAQrB,MAAOA,IAE5CG,aAAaM,QAAQ,QAASR,KAAKS,UAAUV,M,6BAGxCoB,GACL,IAAIC,EAAQD,EAAEN,OAAOQ,aAAa,YAC9BC,EAAOtB,KAAKC,MAAMC,aAAaC,QAAQ,UAC3CmB,EAAKJ,OAAOE,EAAO,GACnBT,KAAKC,SAAS,CACZb,MAAOuB,IAETpB,aAAaM,QAAQ,QAASR,KAAKS,UAAUa,M,+BAGrC,IAAD,OACP,OACE,yBAAKC,UAAU,kBACb,6CACA,0BAAMC,SAAUb,KAAKJ,cACnB,2BAAOkB,GAAG,QAAQC,KAAK,OAAOC,YAAY,oBAAoBC,IAAI,QAAQ9B,MAAOa,KAAKd,MAAMC,MAAO+B,SAAUlB,KAAKN,eAClH,2BAAOoB,GAAG,MAAMC,KAAK,SAAS5B,MAAM,OAEtC,6BACA,6BACA,4BACGa,KAAKd,MAAME,MAAM+B,KAAI,SAACb,EAAMG,GAC3B,OACE,wBAAIW,IAAKX,GACP,2BACGA,EAAQ,EAAI,KACZH,GAEH,2BAAOM,UAAU,OAAOG,KAAK,SAAS5B,MAAM,OAAOkC,QAAS,EAAKC,KAAK3B,KAAK,GAAO4B,WAAUd,IAC5F,2BAAOG,UAAU,SAASG,KAAK,SAAS5B,MAAM,SAASkC,QAAS,EAAKG,OAAO7B,KAAK,GAAO4B,WAAUd,OAGrGT,Y,GAvEKyB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bcd20cba.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./App.css\"\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      value: \"\",\r\n      items: JSON.parse(localStorage.getItem(\"items\")) || [],\r\n      itemIndex: 0,\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n\r\n    localStorage.setItem(\"items\", JSON.stringify(this.state.items))\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    let val = this.state.value.trim()\r\n    if (val !== \"\") {\r\n      let item = JSON.parse(localStorage.getItem(\"items\"))\r\n      item.splice(this.state.itemIndex, 1, val)\r\n      this.setState({ itemIndex: 0 })\r\n      localStorage.setItem(\"items\", JSON.stringify(item))\r\n    }\r\n    this.setState({ value: \"\", items: JSON.parse(localStorage.getItem(\"items\")) })\r\n  }\r\n\r\n  edit(e) {\r\n    let index = e.target.getAttribute(\"data-key\")\r\n    this.setState({ itemIndex: index })\r\n    let items = JSON.parse(localStorage.getItem(\"items\"))\r\n    this.setState({ value: items[index], items: items })\r\n    //items.splice(index, 1)\r\n    localStorage.setItem(\"items\", JSON.stringify(items))\r\n  }\r\n\r\n  delete(e) {\r\n    let index = e.target.getAttribute(\"data-key\")\r\n    let list = JSON.parse(localStorage.getItem(\"items\"))\r\n    list.splice(index, 1)\r\n    this.setState({\r\n      items: list,\r\n    })\r\n    localStorage.setItem(\"items\", JSON.stringify(list))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App App-header\">\r\n        <h1>Shopping List</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input id=\"input\" type=\"text\" placeholder=\"What Do You Need?\" ref=\"title\" value={this.state.value} onChange={this.handleChange} />\r\n          <input id=\"add\" type=\"submit\" value=\"+\" />\r\n        </form>\r\n        <br />\r\n        <br />\r\n        <ul>\r\n          {this.state.items.map((item, index) => {\r\n            return (\r\n              <li key={index}>\r\n                <p>\r\n                  {index + 1 + \"- \"}\r\n                  {item}\r\n                </p>\r\n                <input className=\"edit\" type=\"button\" value=\"Edit\" onClick={this.edit.bind(this)} data-key={index} />\r\n                <input className=\"delete\" type=\"button\" value=\"Delete\" onClick={this.delete.bind(this)} data-key={index} />\r\n              </li>\r\n            )\r\n          }, this)}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}